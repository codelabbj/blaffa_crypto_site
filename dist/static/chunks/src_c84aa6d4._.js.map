{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rarsh/Documents/blaffa%20project/blaffa_site/src/lib/axios.ts"],"sourcesContent":["import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';\r\n\r\nconst API_URL = 'https://api.blaffa.net';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nlet isRefreshing = false;\r\nlet failedQueue: Array<{\r\n  resolve: (token: string) => void;\r\n  reject: (error: unknown) => void;\r\n}> = [];\r\n\r\nconst processQueue = (error: unknown, token: string | null = null) => {\r\n  failedQueue.forEach(prom => {\r\n    if (error) {\r\n      prom.reject(error);\r\n    } else {\r\n      prom.resolve(token!);\r\n    }\r\n  });\r\n  failedQueue = [];\r\n};\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle token refresh\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  async (error: AxiosError) => {\r\n    const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };\r\n\r\n    // If the error is 401 and we haven't tried to refresh yet\r\n    if (error.response?.status === 401 && !originalRequest._retry) {\r\n      if (isRefreshing) {\r\n        // If we're already refreshing, add the request to the queue\r\n        return new Promise((resolve, reject) => {\r\n          failedQueue.push({ resolve, reject });\r\n        })\r\n          .then((token) => {\r\n            originalRequest.headers.Authorization = `Bearer ${token}`;\r\n            return api(originalRequest);\r\n          })\r\n          .catch((err) => {\r\n            return Promise.reject(err);\r\n          });\r\n      }\r\n\r\n      originalRequest._retry = true;\r\n      isRefreshing = true;\r\n\r\n      try {\r\n        const refreshToken = localStorage.getItem('refreshToken');\r\n        if (!refreshToken) {\r\n          // No refresh token available, redirect to login\r\n          localStorage.removeItem('accessToken');\r\n          window.location.href = '/auth';\r\n          return Promise.reject(error);\r\n        }\r\n\r\n        // Try to refresh the token\r\n        const response = await axios.post(\r\n          `${API_URL}/auth/refresh`,\r\n          { refresh: refreshToken },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n\r\n        const { access, refresh: newRefresh } = response.data;\r\n        \r\n        // Update tokens in localStorage\r\n        localStorage.setItem('accessToken', access);\r\n        if (newRefresh) {\r\n          localStorage.setItem('refreshToken', newRefresh);\r\n        }\r\n\r\n        // Update the Authorization header\r\n        api.defaults.headers.common.Authorization = `Bearer ${access}`;\r\n        originalRequest.headers.Authorization = `Bearer ${access}`;\r\n\r\n        // Process the queue\r\n        processQueue(null, access);\r\n\r\n        // Retry the original request\r\n        return api(originalRequest);\r\n      } catch (refreshError) {\r\n        // If refresh fails, clear tokens and redirect to login\r\n        console.error('Failed to refresh token:', refreshError);\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        window.location.href = '/auth';\r\n        processQueue(refreshError);\r\n        return Promise.reject(refreshError);\r\n      } finally {\r\n        isRefreshing = false;\r\n      }\r\n    }\r\n\r\n    // For other errors, just reject\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,UAAU;AAEhB,sCAAsC;AACtC,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,IAAI,eAAe;AACnB,IAAI,cAGC,EAAE;AAEP,MAAM,eAAe,CAAC,OAAgB,QAAuB,IAAI;IAC/D,YAAY,OAAO,CAAC,CAAA;QAClB,IAAI,OAAO;YACT,KAAK,MAAM,CAAC;QACd,OAAO;YACL,KAAK,OAAO,CAAC;QACf;IACF;IACA,cAAc,EAAE;AAClB;AAEA,wCAAwC;AACxC,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAC1B,CAAC;IACC,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT,GACA,CAAC;IACC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,+CAA+C;AAC/C,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,WAAa,UACd,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IAEpC,0DAA0D;IAC1D,IAAI,MAAM,QAAQ,EAAE,WAAW,OAAO,CAAC,gBAAgB,MAAM,EAAE;QAC7D,IAAI,cAAc;YAChB,4DAA4D;YAC5D,OAAO,IAAI,QAAQ,CAAC,SAAS;gBAC3B,YAAY,IAAI,CAAC;oBAAE;oBAAS;gBAAO;YACrC,GACG,IAAI,CAAC,CAAC;gBACL,gBAAgB,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;gBACzD,OAAO,IAAI;YACb,GACC,KAAK,CAAC,CAAC;gBACN,OAAO,QAAQ,MAAM,CAAC;YACxB;QACJ;QAEA,gBAAgB,MAAM,GAAG;QACzB,eAAe;QAEf,IAAI;YACF,MAAM,eAAe,aAAa,OAAO,CAAC;YAC1C,IAAI,CAAC,cAAc;gBACjB,gDAAgD;gBAChD,aAAa,UAAU,CAAC;gBACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;gBACvB,OAAO,QAAQ,MAAM,CAAC;YACxB;YAEA,2BAA2B;YAC3B,MAAM,WAAW,MAAM,wIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,GAAG,QAAQ,aAAa,CAAC,EACzB;gBAAE,SAAS;YAAa,GACxB;gBAAE,SAAS;oBAAE,gBAAgB;gBAAmB;YAAE;YAGpD,MAAM,EAAE,MAAM,EAAE,SAAS,UAAU,EAAE,GAAG,SAAS,IAAI;YAErD,gCAAgC;YAChC,aAAa,OAAO,CAAC,eAAe;YACpC,IAAI,YAAY;gBACd,aAAa,OAAO,CAAC,gBAAgB;YACvC;YAEA,kCAAkC;YAClC,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ;YAC9D,gBAAgB,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ;YAE1D,oBAAoB;YACpB,aAAa,MAAM;YAEnB,6BAA6B;YAC7B,OAAO,IAAI;QACb,EAAE,OAAO,cAAc;YACrB,uDAAuD;YACvD,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,aAAa,UAAU,CAAC;YACxB,aAAa,UAAU,CAAC;YACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;YACvB,aAAa;YACb,OAAO,QAAQ,MAAM,CAAC;QACxB,SAAU;YACR,eAAe;QACjB;IACF;IAEA,gCAAgC;IAChC,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rarsh/Documents/blaffa%20project/blaffa_site/src/components/CryptoTransactionForm.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTheme } from './ThemeProvider';\nimport { FaPhoneAlt, FaMoneyBillWave, FaWallet, FaCheckCircle, FaCopy } from 'react-icons/fa';\nimport api from '@/lib/axios';\nimport { useTranslation } from 'react-i18next';\nimport { useWebSocket } from '@/context/WebSocketContext';\n\nconst API_URL = 'https://api.blaffa.net/blaffa/transaction'; // Replace with your real base URL\n\ninterface Crypto {\n  id: string | number;\n  name: string;\n  symbol: string;\n  public_amount: number;\n  logo?: string;\n  sale_adress?: string;\n}\n\ninterface Network {\n  id: string;\n  name: string;\n  public_name: string;\n  country_code: string;\n  image?: string;\n  otp_required?: boolean;\n  message_init?: string;\n}\n\ninterface CryptoTransactionFormProps {\n  isVerified: boolean;\n  crypto: Crypto;\n  typeTrans: 'buy' | 'sale';\n}\n\nexport default function CryptoTransactionForm({ isVerified, crypto, typeTrans }: CryptoTransactionFormProps) {\n  const { t } = useTranslation();\n  const { theme } = useTheme();\n  const { addMessageHandler } = useWebSocket();\n  const [amount, setAmount] = useState(''); // For buy: local currency, for sell: crypto amount\n  const [calculatedValue, setCalculatedValue] = useState(''); // For buy: crypto, for sell: local currency\n  const [phone, setPhone] = useState('');\n  const [confirmPhone, setConfirmPhone] = useState('');\n  const [walletLink, setWalletLink] = useState('');\n  const [confirmWalletLink, setConfirmWalletLink] = useState('');\n  // Remove transactionType/modal state, use typeTrans prop\n  const transactionType = typeTrans;\n  const [modal, setModal] = useState<'wallet' | 'confirm' | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [apiResult, setApiResult] = useState<Record<string, string> | null>(null);\n  const [error, setError] = useState('');\n  const [networks, setNetworks] = useState<Network[]>([]);\n  const [selectedNetwork, setSelectedNetwork] = useState<Network | null>(null);\n  const [transactionLink, setTransactionLink] = useState<string | null>(null);\n  const [hash, setHash] = useState('');\n  const [showHashModal, setShowHashModal] = useState(false);\n\n  // Fetch networks on mount\n  useEffect(() => {\n    const fetchNetworks = async () => {\n      const token = typeof window !== 'undefined' ? localStorage.getItem('accessToken') : null;\n      if (!token) return;\n      try {\n        const response = await api.get('/blaffa/network/', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        if (Array.isArray(response.data)) {\n          setNetworks(response.data);\n        }\n      } catch {\n        // Optionally handle error\n      }\n    };\n    \n    fetchNetworks();\n  }, []);\n\n  // Calculate value when amount, crypto, or transactionType changes\n  useEffect(() => {\n    if (!amount || isNaN(Number(amount)) || !transactionType) {\n      setCalculatedValue('');\n      return;\n    }\n    if (transactionType === 'buy') {\n      setCalculatedValue((Number(amount) / Number(crypto.public_amount)).toFixed(2));\n    } else if (transactionType === 'sale') {\n      setCalculatedValue((Number(amount) * Number(crypto.public_amount)).toFixed(2));\n    }\n  }, [amount, crypto, transactionType]);\n\n  // Listen for transaction_link from websocket\n  useEffect(() => {\n    type WebSocketMessage = { type: string; data?: string };\n    const handler = (data: WebSocketMessage) => {\n      if (data.type === 'transaction_link' && data.data) {\n        setTransactionLink(data.data);\n      }\n    };\n    const removeHandler = addMessageHandler(handler);\n    return () => removeHandler();\n  }, [addMessageHandler]);\n\n  // Handle confirmation for buy (after wallet link)\n  const handleWalletConfirm = () => {\n    if (!walletLink || walletLink !== confirmWalletLink) {\n      setError(t('Wallet links do not match.'));\n      return;\n    }\n    const sanitizedPhone = phone.replace(/\\s+/g, '');\n    const sanitizedConfirmPhone = confirmPhone.replace(/\\s+/g, '');\n    if (!sanitizedPhone || sanitizedPhone !== sanitizedConfirmPhone) {\n      setError(t('Please fill all fields and confirm your phone number.'));\n      return;\n    }\n    setError('');\n    setModal('confirm');\n  };\n\n  // Handle API call\n  const handleConfirm = async () => {\n    setError('');\n    setApiResult(null);\n    if (!selectedNetwork) {\n      setError(t('Please select a network.'));\n      return;\n    }\n    if (transactionType === 'sale') {\n      setShowHashModal(true);\n      return;\n    }\n    setLoading(true);\n    try {\n      const payload: Record<string, string> = {\n        type_trans: 'buy',\n        total_crypto: calculatedValue,\n        crypto_id: String(crypto.id),\n        phone_number: phone.replace(/\\s+/g, ''),\n        network_id: selectedNetwork.id,\n        amount: amount,\n        wallet_link: walletLink,\n      };\n      const token = typeof window !== 'undefined' ? localStorage.getItem('accessToken') : null;\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      };\n      const res = await fetch(API_URL, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(payload),\n      });\n      const data = await res.json();\n      setApiResult(data as Record<string, string>);\n      if (data && data.transaction_link) {\n        window.open(data.transaction_link, '_blank', 'noopener,noreferrer');\n      }\n    } catch {\n      setError(t('Transaction failed. Please try again.'));\n    } finally {\n      setLoading(false);\n      setModal(null);\n    }\n  };\n\n  // Copy to clipboard\n  const handleCopy = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  // Add a function to handle hash submission for sell\n  const handleHashSubmit = async () => {\n    setLoading(true);\n    setError('');\n    setApiResult(null);\n    if (!selectedNetwork) {\n      setError(t('Please select a network.'));\n      setLoading(false);\n      return;\n    }\n    try {\n      const payload: Record<string, string> = {\n        type_trans: 'sale',\n        total_crypto: amount,\n        crypto_id: String(crypto.id),\n        phone_number: phone.replace(/\\s+/g, ''),\n        network_id: selectedNetwork.id,\n        amount: calculatedValue,\n        hash,\n      };\n      const token = typeof window !== 'undefined' ? localStorage.getItem('accessToken') : null;\n      const headers: Record<string, string> = {\n        'Content-Type': 'application/json',\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      };\n      const res = await fetch(API_URL, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(payload),\n      });\n      const data = await res.json();\n      setApiResult(data as Record<string, string>);\n      if (data && data.transaction_link) {\n        window.open(data.transaction_link, '_blank', 'noopener,noreferrer');\n      }\n      // Show success message for 2 seconds before closing modal\n      setTimeout(() => {\n        setShowHashModal(false);\n        setApiResult(null);\n        setHash('');\n        setModal(null);\n      }, 2000);\n    } catch {\n      setError(t('Transaction failed. Please try again.'));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isVerified) {\n    return (\n      <div className=\"p-4 bg-yellow-100 text-yellow-800 rounded-lg text-center\">\n        {t('Please verify your account to buy or sell crypto.')}\n      </div>\n    );\n  }\n\n  // Show transaction type modal first\n  // Remove transactionType/modal state, use typeTrans prop\n  // if (modal === 'type') {\n  //   return (\n  //     <Modal onClose={() => setModal(null)} theme={theme}>\n  //       <div className=\"p-4\">\n  //         <h3 className=\"text-lg font-bold mb-4 text-center\">{t('Are you buying or selling?')}</h3>\n  //         <div className=\"flex gap-4\">\n  //           <button className=\"flex-1 bg-gradient-to-r from-green-500 to-green-700 text-white py-2 rounded-lg font-bold text-lg shadow-md hover:from-green-600 hover:to-green-800 transition flex items-center justify-center gap-2\" onClick={() => handleTypeSelect('buy')}>\n  //             <FaWallet /> {t('Buy')}\n  //           </button>\n  //           <button className=\"flex-1 bg-gradient-to-r from-red-500 to-red-700 text-white py-2 rounded-lg font-bold text-lg shadow-md hover:from-red-600 hover:to-red-800 transition flex items-center justify-center gap-2\" onClick={() => handleTypeSelect('sell')}>\n  //             <FaWallet /> {t('Sell')}\n  //           </button>\n  //         </div>\n  //       </div>\n  //     </Modal>\n  //   );\n  // }\n\n  return (\n    <div\n      className=\"bg-gradient-to-r rounded-2xl shadow-2xl p-6 sm:p-8 w-full max-w-xs sm:max-w-md relative mx-auto mt-8\"\n      style={{\n        background: theme.mode === 'dark'\n          ? 'linear-gradient(135deg, rgba(30,41,59,0.85) 60%, rgba(51,65,85,0.85) 100%)'\n          : 'linear-gradient(135deg, rgba(255,255,255,0.85) 60%, rgba(226,232,240,0.85) 100%)',\n        borderColor: theme.mode === 'dark' ? '#334155' : '#e5e7eb',\n      }}\n    >\n      <h2 className=\"text-2xl font-extrabold mb-6 text-center\" style={{ color: theme.colors.primary }}>\n        {transactionType === 'buy'\n          ? `${t('Buy')} ${crypto.name}`\n          : transactionType === 'sale'\n            ? `${t('Sell')} ${crypto.name}`\n            : `${t('Buy or Sell')} ${crypto.name}`}\n      </h2>\n      {/* Network selection */}\n      <div className=\"mb-4\">\n        <label className=\"block mb-1 font-medium\">{t('Select Network')}</label>\n        <select\n          className={`w-full p-3 rounded-lg border focus:ring-2 focus:ring-blue-400 text-lg transition-colors\n            ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100' : 'bg-white border-slate-300 text-slate-900'}`}\n          value={selectedNetwork?.id || ''}\n          onChange={e => {\n            const net = networks.find(n => String(n.id) === e.target.value);\n            setSelectedNetwork(net || null);\n          }}\n        >\n          <option value=\"\">{t('Select a network')}</option>\n          {networks.map(net => (\n            <option key={net.id} value={String(net.id)}>{net.public_name || net.name}</option>\n          ))}\n        </select>\n        {selectedNetwork && selectedNetwork.image && (\n          <div className=\"mt-2 flex items-center gap-2\">\n            <img src={selectedNetwork.image} alt={selectedNetwork.name} className=\"w-8 h-8 rounded\" />\n            <span className=\"text-sm\">{selectedNetwork.public_name || selectedNetwork.name}</span>\n          </div>\n        )}\n      </div>\n      <div className=\"flex items-center gap-4 mb-6 justify-center\">\n        {crypto.logo && <img src={crypto.logo} alt={crypto.name} className=\"w-14 h-14 rounded-full border-2 border-blue-400 shadow-md\" />}\n        <div>\n          <div className=\"font-bold text-lg flex items-center gap-2\">\n            {crypto.name}\n            <span className=\"inline-block bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200 px-2 py-0.5 rounded-full text-xs font-semibold border border-blue-300 ml-1\">\n              {crypto.symbol}\n            </span>\n          </div>\n          <div className=\"text-blue-500 text-sm font-mono\">{t('Public Amount')}: {crypto.public_amount} XOF</div>\n        </div>\n      </div>\n      {/* Amount input (dynamic) */}\n      <div className=\"mb-4 relative\">\n        <label className=\"block mb-1 font-medium\">\n          {transactionType === 'buy' ? t('Amount (Local Currency)') : t('Amount (Crypto)')}\n        </label>\n        <div className=\"relative\">\n          <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n            <FaMoneyBillWave />\n          </span>\n          <input\n            type=\"number\"\n            className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 text-lg transition-colors\n              ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n            value={amount}\n            onChange={e => setAmount(e.target.value)}\n            min=\"0\"\n            placeholder={transactionType === 'buy' ? t('Enter amount') : t('Enter crypto amount')}\n          />\n        </div>\n      </div>\n      {/* Calculated value display (dynamic) */}\n      {calculatedValue && (\n        <div className={`mb-4 ${transactionType === 'buy' ? 'text-green-600 dark:text-green-400' : 'text-blue-600 dark:text-blue-400'} text-center text-lg font-semibold`}>\n          {transactionType === 'buy'\n            ? <>{t('You will get')}: <span className=\"font-bold\">{calculatedValue} {crypto.symbol}</span></>\n            : <>{t('You will receive')}: <span className=\"font-bold\">{calculatedValue} XOF</span></>}\n        </div>\n      )}\n      {/* Phone number input */}\n      {transactionType === 'buy' ? (\n        <>\n          {/* Wallet link input */}\n          <div className=\"mb-4 relative\">\n            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n              <FaWallet />\n            </span>\n            <input\n              type=\"text\"\n              className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n              placeholder={t('Wallet link')}\n              value={walletLink}\n              onChange={e => setWalletLink(e.target.value)}\n            />\n          </div>\n          {/* Confirm wallet link input */}\n          <div className=\"mb-4 relative\">\n            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n              <FaWallet />\n            </span>\n            <input\n              type=\"text\"\n              className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n              placeholder={t('Confirm wallet link')}\n              value={confirmWalletLink}\n              onChange={e => setConfirmWalletLink(e.target.value)}\n            />\n          </div>\n        </>\n      ) : (\n        <>\n          {/* Phone number input (for sale) */}\n          <div className=\"mb-4 relative\">\n            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n              <FaPhoneAlt />\n            </span>\n            <input\n              type=\"tel\"\n              className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n              placeholder={t('Phone number')}\n              value={phone}\n              onChange={e => setPhone(e.target.value)}\n            />\n          </div>\n          {/* Confirm phone number input (for sale) */}\n          <div className=\"mb-4 relative\">\n            <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n              <FaPhoneAlt />\n            </span>\n            <input\n              type=\"tel\"\n              className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n              placeholder={t('Confirm phone number')}\n              value={confirmPhone}\n              onChange={e => setConfirmPhone(e.target.value)}\n            />\n          </div>\n        </>\n      )}\n      {/* Error message */}\n      {error && <div className=\"mb-4 text-red-500 text-center font-medium\">{t(error)}</div>}\n      {/* Action button */}\n      <button\n        className=\"w-full py-3 rounded-lg font-bold text-lg flex items-center justify-center gap-2 transition bg-gradient-to-r from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 text-white shadow-lg active:scale-95\"\n        onClick={() => {\n          if (!amount) {\n            setError(t('Please fill all fields.'));\n            return;\n          }\n          if (!selectedNetwork) {\n            setError(t('Please select a network.'));\n            return;\n          }\n          if (transactionType === 'buy') {\n            if (!walletLink || !confirmWalletLink || walletLink !== confirmWalletLink) {\n              setError(t('Please fill all fields and confirm your wallet link.'));\n              return;\n            }\n            setError('');\n            setModal('wallet');\n          } else {\n            const sanitizedPhone = phone.replace(/\\s+/g, '');\n            const sanitizedConfirmPhone = confirmPhone.replace(/\\s+/g, '');\n            if (!sanitizedPhone || sanitizedPhone !== sanitizedConfirmPhone) {\n              setError(t('Please fill all fields and confirm your phone number.'));\n              return;\n            }\n            setError('');\n            setModal('confirm');\n          }\n        }}\n        disabled={loading}\n      >\n        <FaCheckCircle /> {t('Continue')}\n      </button>\n\n      {/* Wallet link modal for buy */}\n      {modal === 'wallet' && transactionType === 'buy' && (\n        <Modal onClose={() => setModal(null)} theme={theme}>\n          <div className=\"p-4\">\n            <h3 className=\"text-lg font-bold mb-2 text-center\">{t('Enter your phone number')}</h3>\n            <div className=\"relative mb-2\">\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n                <FaPhoneAlt />\n              </span>\n              <input\n                type=\"tel\"\n                className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                  ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n                placeholder={t('Phone number')}\n                value={phone}\n                onChange={e => setPhone(e.target.value)}\n              />\n            </div>\n            <div className=\"relative mb-2\">\n              <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-blue-400\">\n                <FaPhoneAlt />\n              </span>\n              <input\n                type=\"tel\"\n                className={`w-full p-3 pl-10 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\n                  ${theme.mode === 'dark' ? 'bg-slate-900 border-slate-600 text-slate-100 placeholder-slate-400' : 'bg-white border-slate-300 text-slate-900 placeholder-slate-400'}`}\n                placeholder={t('Confirm phone number')}\n                value={confirmPhone}\n                onChange={e => setConfirmPhone(e.target.value)}\n              />\n            </div>\n            {error && <div className=\"mb-2 text-red-500 text-center\">{t(error)}</div>}\n            <button className=\"w-full bg-gradient-to-r from-blue-500 to-blue-700 text-white py-2 rounded-lg font-bold text-lg shadow-md hover:from-blue-600 hover:to-blue-800 transition mt-2 flex items-center justify-center gap-2\" onClick={handleWalletConfirm}>\n              <FaCheckCircle /> {t('Continue')}\n            </button>\n          </div>\n        </Modal>\n      )}\n\n      {/* Confirmation modal */}\n      {modal === 'confirm' && (\n        <Modal onClose={() => setModal(null)} theme={theme}>\n          <div className=\"p-4\">\n            <h3 className=\"text-lg font-bold mb-2 text-center\">{t('Confirm your transaction')}</h3>\n            <div className=\"mb-2\">Type: <span className=\"font-semibold\">{transactionType?.toUpperCase()}</span></div>\n            <div className=\"mb-2\">Crypto: <span className=\"font-semibold\">{crypto.name}</span></div>\n            <div className=\"mb-2\">Amount: <span className=\"font-semibold\">{\n              transactionType === 'sale'\n                ? `${calculatedValue} XOF`\n                : `${calculatedValue} ${crypto.symbol}`\n            }</span></div>\n            <div className=\"mb-2\">Phone: <span className=\"font-semibold\">{phone}</span></div>\n            <div className=\"mb-2\">Network: <span className=\"font-semibold\">{selectedNetwork?.public_name || selectedNetwork?.name}</span></div>\n            {transactionType === 'buy' && (\n              <div className=\"mb-2\">Wallet Link: <span className=\"font-semibold break-all\">{walletLink}</span></div>\n            )}\n            <button className=\"w-full bg-gradient-to-r from-green-500 to-green-700 text-white py-2 rounded-lg font-bold text-lg shadow-md hover:from-green-600 hover:to-green-800 transition mt-4 flex items-center justify-center gap-2\" onClick={handleConfirm} disabled={loading}>\n              {loading ? t('Processing...') : <FaCheckCircle />} {t('Confirm')}\n            </button>\n          </div>\n        </Modal>\n      )}\n\n      {/* API result display */}\n      {apiResult && (\n        <div className=\"mt-6 p-4 rounded-lg text-center shadow-lg\"\n          style={{\n            background: theme.mode === 'dark'\n              ? 'linear-gradient(135deg, rgba(30,41,59,0.95) 60%, rgba(51,65,85,0.95) 100%)'\n              : 'linear-gradient(135deg, rgba(255,255,255,0.95) 60%, rgba(226,232,240,0.95) 100%)',\n          }}\n        >\n          {transactionType === 'sale' && apiResult?.wallet_address && (\n            <>\n              <div className=\"mb-2 font-bold\">{t('Sell Wallet Address')}:</div>\n              <div className=\"mb-2 break-all text-blue-600 dark:text-blue-300 font-mono text-lg\">{apiResult.wallet_address}</div>\n              <button className=\"bg-gradient-to-r from-blue-500 to-blue-700 text-white px-3 py-1 rounded-lg font-semibold mt-2\" onClick={() => handleCopy(apiResult.wallet_address)}>{t('Copy')}</button>\n              <div className=\"mt-2 text-sm text-gray-600 dark:text-gray-300\">{t('Send your crypto to this address to complete the sale.')}</div>\n            </>\n          )}\n          {transactionType === 'buy' && (\n            <div className=\"text-green-600 dark:text-green-400 font-bold flex flex-col items-center gap-2\">\n              <FaCheckCircle className=\"text-2xl\" />\n              {t('Your buy request has been submitted!')}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Transaction Link Modal */}\n      {transactionLink && (\n        <Modal onClose={() => setTransactionLink(null)} theme={theme}>\n          <div className=\"p-6 flex flex-col items-center\">\n            <h3 className=\"text-lg font-bold mb-4 text-center\">{t('Continue Payment')}</h3>\n            <button\n              onClick={() => window.open(transactionLink, '_blank', 'noopener,noreferrer')}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors font-bold text-lg shadow-md\"\n            >\n              {t('Click to continue payment')}\n            </button>\n            {/* <button\n              onClick={() => setTransactionLink(null)}\n              className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              {t('Close')}\n            </button> */}\n          </div>\n        </Modal>\n      )}\n\n      {/* New modal for sell after confirm */}\n      {showHashModal && transactionType === 'sale' && (\n        <Modal onClose={() => setShowHashModal(false)} theme={theme}>\n          <div className=\"p-4\">\n            <h3 className=\"text-lg font-bold mb-2 text-center\">{t('Adresse de vente')}</h3>\n            <div className=\"mb-2 relative flex items-center\">\n              <input\n                type=\"text\"\n                className=\"w-full p-3 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors font-mono\"\n                value={crypto.sale_adress || ''}\n                readOnly\n              />\n              <button\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 text-blue-500 hover:text-blue-700\"\n                onClick={() => handleCopy(crypto.sale_adress || '')}\n                title={t('Copier')}\n              >\n                <FaCopy />\n              </button>\n            </div>\n            <div className=\"text-sm text-gray-500 mb-4\">Copiez l&apos;adresse de vente pour vendre votre crypto.</div>\n            <div className=\"mb-4 relative\">\n              <input\n                type=\"text\"\n                className=\"w-full p-3 rounded-lg border focus:ring-2 focus:ring-blue-400 transition-colors\"\n                placeholder={t('Entrez le hash de la transaction')}\n                value={hash}\n                onChange={e => setHash(e.target.value)}\n              />\n            </div>\n            {error && <div className=\"mb-2 text-red-500 text-center font-medium\">{t(error)}</div>}\n            {apiResult && (\n              <div className=\"mb-2 text-green-600 text-center font-medium\">{t('Votre vente a été soumise avec succès!')}</div>\n            )}\n            <button\n              className=\"w-full bg-gradient-to-r from-green-500 to-green-700 text-white py-2 rounded-lg font-bold text-lg shadow-md hover:from-green-600 hover:to-green-800 transition mt-2 flex items-center justify-center gap-2\"\n              onClick={handleHashSubmit}\n              disabled={loading || !hash}\n            >\n              {loading ? t('Traitement...') : <FaCheckCircle />} {t('OK')}\n            </button>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n}\n\n// Modal with blur and shadow\nfunction Modal({ children, onClose, theme }: { children: React.ReactNode; onClose: () => void; theme: { mode: string } }) {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\" style={{backdropFilter: 'blur(6px)'}}>\n      <div\n        className=\"rounded-xl shadow-2xl max-w-md w-full relative border\"\n        style={{\n          background: theme.mode === 'dark'\n            ? 'linear-gradient(135deg, rgba(30,41,59,0.97) 60%, rgba(51,65,85,0.97) 100%)'\n            : 'linear-gradient(135deg, rgba(255,255,255,0.97) 60%, rgba(226,232,240,0.97) 100%)',\n          borderColor: theme.mode === 'dark' ? '#334155' : '#e5e7eb',\n        }}\n      >\n        <button\n          className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 text-2xl font-bold\"\n          onClick={onClose}\n        >\n          ×\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1348, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/rarsh/Documents/blaffa%20project/blaffa_site/src/app/crypto/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport api from \"@/lib/axios\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useTranslation } from \"react-i18next\";\nimport CryptoTransactionForm from '@/components/CryptoTransactionForm';\nimport { FaCheckCircle, FaExclamationTriangle, FaArrowLeft } from 'react-icons/fa';\nimport { ImSpinner2 } from 'react-icons/im';\n\ninterface Crypto {\n  id: number;\n  public_amount: number;\n  created_at: string;\n  updated_at: string;\n  logo: string;\n  code: string;\n  name: string;\n  amount: string;\n  symbol: string;\n}\n\nconst CRYPTO_API = \"https://api.blaffa.net/blaffa/crypto\";\nconst CHECK_USER_STATUS_API = \"https://api.blaffa.net/auth/check-user-account-status\";\nconst UPLOAD_API = \"https://api.blaffa.net/blaffa/upload/file\";\n\nexport default function CryptoPage() {\n  const { t, i18n } = useTranslation();\n  const { theme } = useTheme();\n  const [cryptos, setCryptos] = useState<Crypto[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showVerifyModal, setShowVerifyModal] = useState(false);\n  const [userVerified, setUserVerified] = useState<boolean | null>(null);\n  const [userId, setUserId] = useState<string>(\"\");\n  const [uploading, setUploading] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const [userImage, setUserImage] = useState<File | null>(null);\n  const [cardImage, setCardImage] = useState<File | null>(null);\n  const [statusLoading, setStatusLoading] = useState(false);\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [selectedCrypto, setSelectedCrypto] = useState<Crypto | null>(null);\n  const [showTypeModal, setShowTypeModal] = useState(true); // Show Buy/Sell modal first\n  const [typeTrans, setTypeTrans] = useState<string | null>(null); // 'buy' or 'sale'\n\n  useEffect(() => {\n    // Fetch cryptos only if typeTrans is selected\n    const fetchCryptos = async () => {\n      if (!typeTrans) return;\n      setLoading(true);\n      setError(null);\n      try {\n        const token = localStorage.getItem(\"accessToken\");\n        const response = await api.get(CRYPTO_API + `?type_trans=${typeTrans}`, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...(token ? { Authorization: `Bearer ${token}` } : {}),\n          },\n        });\n        setCryptos(Array.isArray(response.data.results) ? response.data.results : []);\n      } catch {\n        setError(t(\"Failed to fetch cryptocurrencies\"));\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCryptos();\n    // Get userId from localStorage (assuming it's stored there)\n    const uid = localStorage.getItem(\"userId\");\n    if (uid) {\n      setUserId(uid);\n    } else {\n      // Fallback: fetch user profile if accessToken exists\n      const token = localStorage.getItem(\"accessToken\");\n      if (token) {\n        api.get(\"/auth/me\", {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n          .then(res => {\n            const profile = res.data;\n            if (profile && profile.id) {\n              localStorage.setItem(\"userId\", profile.id.toString());\n              setUserId(profile.id.toString());\n            }\n          })\n          .catch(() => {});\n      }\n    }\n    // Force language to French\n    i18n.changeLanguage('fr');\n    // eslint-disable-next-line no-console\n    console.log('Current language:', i18n.language, 'Back:', t('Back'));\n  }, [i18n.language, typeTrans]);\n\n  // Check user verification status ONCE per mount, when userId is available\n  useEffect(() => {\n    if (!userId) return;\n    let isMounted = true;\n    const checkStatus = async () => {\n      setStatusLoading(true);\n      try {\n        const token = localStorage.getItem(\"accessToken\");\n        const response = await fetch(CHECK_USER_STATUS_API, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...(token ? { Authorization: `Bearer ${token}` } : {}),\n          },\n          body: JSON.stringify({ user_id: userId }),\n        });\n        const data = await response.json();\n        const verified = data.is_verified ?? data.is_verify ?? false;\n        if (isMounted) setUserVerified(!!verified);\n      } catch {\n        if (isMounted) setUserVerified(false);\n      } finally {\n        if (isMounted) setStatusLoading(false);\n      }\n    };\n    checkStatus();\n    return () => { isMounted = false; };\n  }, [userId]);\n\n  // When user selects a crypto\n  const handleCryptoSelect = (crypto: Crypto) => {\n    if (!userId) {\n      setError(t(\"User ID not found. Please log in.\"));\n      return;\n    }\n    if (userVerified) {\n      setSelectedCrypto(crypto);\n    } else {\n      setShowVerifyModal(true);\n    }\n  };\n\n  // Handle image upload\n  const handleUpload = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setUploading(true);\n    setUploadError(null);\n    if (!userImage || !cardImage) {\n      setUploadError(t(\"Please select both images.\"));\n      setUploading(false);\n      return;\n    }\n    try {\n      const formData = new FormData();\n      // Try different field name combinations\n      // Option 1: Both files with same field name (array)\n      // formData.append(\"user_card[]\", userImage);\n      // formData.append(\"user_card[]\", cardImage);\n      \n      // Option 2: Individual field names (matching server response)\n      formData.append(\"file\", userImage);\n      formData.append(\"image\", cardImage);\n      \n      // Option 3: Try with different field names (uncomment if others don't work)\n      // formData.append(\"user_image\", userImage);\n      // formData.append(\"card_image\", cardImage);\n      \n      // Debug: Log FormData contents\n      console.log(\"FormData contents:\");\n      for (const pair of formData.entries()) {\n        console.log(pair[0] + ':', pair[1]);\n      }\n      \n      const token = localStorage.getItem(\"accessToken\");\n      \n      // Use fetch directly to avoid axios header conflicts\n      const response = await fetch(UPLOAD_API, {\n        method: 'POST',\n        headers: {\n          ...(token ? { Authorization: `Bearer ${token}` } : {}),\n        },\n        body: formData,\n      });\n      \n      // Debug: Log response details\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Error response body:\", errorText);\n        throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      console.log(\"Upload response:\", result);\n      \n      setShowVerifyModal(false);\n      setSuccessMessage(t(\"Images uploaded. Please wait for admin verification.\"));\n      setShowSuccessModal(true);\n      setUserVerified(false);\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      setUploadError(t(\"Failed to upload images. Try again.\"));\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Top right status button\n  const renderStatusButton = () => {\n    // Mobile: fixed at top right, Desktop: normal\n    const baseClass =\n      'rounded-full flex items-center justify-center shadow-md transition-all';\n    const sizeClass = 'w-9 h-9 text-xl';\n    const mobileClass =\n      'fixed top-3 right-3 z-50 sm:static sm:top-auto sm:right-auto';\n    if (statusLoading)\n      return (\n        <span\n          className={`${baseClass} ${sizeClass} ${mobileClass} bg-gray-300 animate-spin text-blue-500`}\n          title={t(\"Checking...\")}\n        >\n          <ImSpinner2 />\n        </span>\n      );\n    if (userVerified === true)\n      return (\n        <span\n          className={`${baseClass} ${sizeClass} ${mobileClass} bg-green-500 text-white`}\n          title={t(\"Verified\")}\n        >\n          <FaCheckCircle />\n        </span>\n      );\n    return (\n      <span\n        className={`${baseClass} ${sizeClass} ${mobileClass} bg-yellow-400 text-white`}\n        title={t(\"Not Verified\")}\n      >\n        <FaExclamationTriangle />\n      </span>\n    );\n  };\n\n  return (\n    <div className={`min-h-screen bg-gradient-to-br ${theme.colors.a_background} p-2 sm:p-4 flex flex-col items-center`}>\n      {/* Buy/Sell Modal */}\n      {showTypeModal && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm px-2 sm:px-0\">\n          <div className={`bg-gradient-to-r ${theme.colors.a_background} rounded-2xl shadow-2xl p-6 sm:p-8 w-full max-w-xs sm:max-w-md relative flex flex-col items-center`}>\n            <h2 className=\"text-lg sm:text-xl font-bold mb-4 text-center\">{t(\"Choose Transaction Type\")}</h2>\n            <div className=\"flex flex-col gap-4 w-full\">\n              <button\n                className=\"w-full px-6 py-3 bg-green-600 text-white rounded-lg text-lg font-semibold hover:bg-green-700 transition-all\"\n                onClick={() => {\n                  setTypeTrans('buy');\n                  setShowTypeModal(false);\n                }}\n              >\n                {t(\"Buy Crypto\")}\n              </button>\n              <button\n                className=\"w-full px-6 py-3 bg-yellow-500 text-white rounded-lg text-lg font-semibold hover:bg-yellow-600 transition-all\"\n                onClick={() => {\n                  setTypeTrans('sale');\n                  setShowTypeModal(false);\n                }}\n              >\n                {t(\"Sell Crypto\")}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      <button\n        onClick={() => window.history.back()}\n        className={`fixed top-3 left-3 z-50 w-10 h-10 flex items-center justify-center rounded-full shadow-md\n           bg-transparent text-blue-600 dark:text-blue-200  transition-all`}\n        aria-label={t('Back to Crypto')}\n        style={{ backdropFilter: 'blur(4px)' }}\n      >\n        <FaArrowLeft className=\"text-xl\" />\n      </button>\n      <div className=\"w-full max-w-screen-sm\">\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 mb-6 sm:mb-8\">\n          <h1 className=\"text-xl sm:text-2xl font-bold text-center sm:text-left w-full sm:w-auto\">{t(\"Cryptocurrencies\")}</h1>\n          <div className=\"flex justify-center sm:justify-end w-full sm:w-auto relative\">{renderStatusButton()}</div>\n        </div>\n        {error && <div className=\"mb-4 p-3 sm:p-4 bg-red-100 border border-red-400 text-red-700 rounded text-sm sm:text-base\">{error}</div>}\n        {/* Only show crypto list if typeTrans is selected and modal is closed */}\n        {typeTrans && !showTypeModal && (selectedCrypto ? (\n          <>\n            <button\n              className={\n                `mb-4 flex items-center gap-2 rounded-lg shadow-sm font-semibold transition-all\n                px-2 py-1 sm:px-4 sm:py-2\n                text-base sm:text-lg\n                ${theme.mode === 'dark' ? 'bg-slate-800 text-blue-300 hover:bg-slate-700' : 'bg-blue-50 text-blue-700 hover:bg-blue-100'}\n                `\n              }\n              style={{ border: `1px solid ${theme.colors.accent}` }}\n              onClick={() => setSelectedCrypto(null)}\n            >\n              <FaArrowLeft className=\"text-lg sm:mr-2\" />\n              <span className=\"hidden sm:inline\">{t('Back to Cryptos')}</span>\n            </button>\n            { (typeTrans === 'buy' || typeTrans === 'sale') && (\n              <CryptoTransactionForm\n                isVerified={userVerified === true}\n                crypto={selectedCrypto}\n                typeTrans={typeTrans}\n              />\n            ) }\n          </>\n        ) : loading ? (\n          <div className=\"flex items-center justify-center min-h-[200px] sm:min-h-[300px]\">\n            <div className=\"animate-spin rounded-full h-10 w-10 sm:h-12 sm:w-12 border-4 border-blue-500/30 border-t-blue-500\"></div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6\">\n            {cryptos.map((crypto) => (\n              <div\n                key={crypto.id}\n                className={`group relative overflow-hidden bg-gradient-to-br ${theme.colors.s_background} border border-slate-600/30 rounded-2xl p-4 sm:p-6 flex flex-col items-center shadow-md hover:scale-[1.03] active:scale-95 transition-all duration-200 cursor-pointer`}\n                onClick={() => handleCryptoSelect(crypto)}\n              >\n                <img src={crypto.logo} alt={crypto.name} className=\"w-10 h-10 sm:w-12 sm:h-12 object-contain mb-3 sm:mb-4 rounded-full border border-slate-300 bg-white\" />\n                <div className=\"font-bold text-base sm:text-lg mb-1 sm:mb-2 text-center\">{crypto.name}</div>\n                <div className=\"text-slate-400 text-xs sm:text-sm mb-1\">{crypto.symbol}</div>\n                <div className=\"text-blue-500 font-mono text-2xl sm:text-3xl font-extrabold\">{crypto.public_amount}xof</div>\n              </div>\n            ))}\n          </div>\n        ))}\n\n        {/* Verification Modal */}\n        {showVerifyModal && !userVerified && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm px-2 sm:px-0\">\n            <div className={`bg-gradient-to-r ${theme.colors.a_background} rounded-2xl shadow-2xl p-4 sm:p-8 w-full max-w-xs sm:max-w-md relative`}>\n              <h2 className=\"text-lg sm:text-xl font-bold mb-3 sm:mb-4 text-center\">{t(\"Account Verification Required\")}</h2>\n              <form onSubmit={handleUpload}>\n                <div className=\"mb-3 sm:mb-4\">\n                  <label className=\"block mb-1 sm:mb-2 text-sm sm:text-base font-semibold\">{t(\"Upload your image (face)\")}</label>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={e => setUserImage(e.target.files?.[0] || null)}\n                    className=\"w-full text-xs sm:text-sm border rounded p-2\"\n                  />\n                  {userImage && (\n                    <div className=\"mt-2 flex justify-center\">\n                      <img src={URL.createObjectURL(userImage)} alt=\"Preview\" className=\"h-20 w-20 object-cover rounded shadow\" />\n                    </div>\n                  )}\n                </div>\n                <div className=\"mb-3 sm:mb-4\">\n                  <label className=\"block mb-1 sm:mb-2 text-sm sm:text-base font-semibold\">{t(\"Upload your card image (ID card)\")}</label>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={e => setCardImage(e.target.files?.[0] || null)}\n                    className=\"w-full text-xs sm:text-sm border rounded p-2\"\n                  />\n                  {cardImage && (\n                    <div className=\"mt-2 flex justify-center\">\n                      <img src={URL.createObjectURL(cardImage)} alt=\"Preview\" className=\"h-20 w-20 object-cover rounded shadow\" />\n                    </div>\n                  )}\n                </div>\n                {uploadError && <div className=\"mb-2 text-red-600 text-xs sm:text-sm text-center\">{uploadError}</div>}\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 mt-4\">\n                  <button\n                    type=\"button\"\n                    className=\"w-full sm:flex-1 px-4 py-2 bg-gray-400 dark:bg-slate-700 rounded hover:bg-gray-300 dark:hover:bg-slate-600 text-sm sm:text-base\"\n                    onClick={() => setShowVerifyModal(false)}\n                    disabled={uploading}\n                  >\n                    {t(\"Cancel\")}\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"w-full sm:flex-1 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm sm:text-base\"\n                    disabled={uploading}\n                  >\n                    {uploading ? t(\"Uploading...\") : t(\"Upload & Submit\")}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n\n        {/* Success Modal */}\n        {showSuccessModal && (\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm px-2 sm:px-0\">\n            <div className={`bg-gradient-to-r ${theme.colors.a_background} rounded-2xl shadow-2xl p-6 sm:p-8 w-full max-w-xs sm:max-w-md relative`}>\n              <h2 className=\"text-lg sm:text-xl font-bold mb-4 text-center text-green-600\">{t(\"Success\")}</h2>\n              <div className=\"mb-6 text-center text-base sm:text-lg\">{successMessage}</div>\n              <div className=\"flex justify-center\">\n                <button\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-base\"\n                  onClick={() => setShowSuccessModal(false)}\n                >\n                  {t(\"Close\")}\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}